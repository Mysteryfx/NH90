/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSG_VEC4UI
#define OSG_VEC4UI 1

#include <osg/Math>

namespace osg {

/** General purpose float quad. Uses include representation
  * of color coordinates.
  * No support yet added for float * Vec4f - is it necessary?
  * Need to define a non-member non-friend operator*  etc.
  *    Vec4f * float is okay
*/
class Vec4ui
{
    public:

        /** Type of Vec class.*/
        typedef unsigned int value_type;

        /** Number of vector components. */
        enum { num_components = 4 };
        
        /** Vec member variable. */
		union {
			struct {
				W<value_type> x,y,z,w;
			};
			struct {
				W<value_type> r,g,b,a;
			};
		    value_type _v[4];
		};

        Vec4ui() { _v[0]=0; _v[1]=0; _v[2]=0; _v[3]=0; }

        Vec4ui(value_type x, value_type y, value_type z, value_type w)
        {
            _v[0]=x;
            _v[1]=y;
            _v[2]=z;
            _v[3]=w;
        }

        inline bool operator == (const Vec4ui& v) const { return _v[0]==v._v[0] && _v[1]==v._v[1] && _v[2]==v._v[2] && _v[3]==v._v[3]; }
        inline bool operator != (const Vec4ui& v) const { return _v[0]!=v._v[0] || _v[1]!=v._v[1] || _v[2]!=v._v[2] || _v[3]!=v._v[3]; }
        inline bool operator <  (const Vec4ui& v) const
        {
            if (_v[0]<v._v[0]) return true;
            else if (_v[0]>v._v[0]) return false;
            else if (_v[1]<v._v[1]) return true;
            else if (_v[1]>v._v[1]) return false;
            else if (_v[2]<v._v[2]) return true;
            else if (_v[2]>v._v[2]) return false;
            else return (_v[3]<v._v[3]);
        }

        inline value_type* ptr() { return _v; }
        inline const value_type* ptr() const { return _v; }

        inline void set( value_type x, value_type y, value_type z, value_type w)
        {
            _v[0]=x; _v[1]=y; _v[2]=z; _v[3]=w;
        }

        inline value_type& operator [] (unsigned int i) { return _v[i]; }
        inline value_type  operator [] (unsigned int i) const { return _v[i]; }

        /** Multiply by scalar. */
        inline Vec4ui operator * (value_type rhs) const
        {
            return Vec4ui(_v[0]*rhs, _v[1]*rhs, _v[2]*rhs, _v[3]*rhs);
        }

        /** Unary multiply by scalar. */
        inline Vec4ui& operator *= (value_type rhs)
        {
            _v[0]*=rhs;
            _v[1]*=rhs;
            _v[2]*=rhs;
            _v[3]*=rhs;
            return *this;
        }

        /** Divide by scalar. */
        inline Vec4ui operator / (value_type rhs) const
        {
            return Vec4ui(_v[0]/rhs, _v[1]/rhs, _v[2]/rhs, _v[3]/rhs);
        }

        /** Unary divide by scalar. */
        inline Vec4ui& operator /= (value_type rhs)
        {
            _v[0]/=rhs;
            _v[1]/=rhs;
            _v[2]/=rhs;
            _v[3]/=rhs;
            return *this;
        }


        /** Binary vector multiply. */
        inline Vec4ui operator * (const Vec4ui& rhs) const
        {
            return Vec4ui(_v[0]*rhs._v[0], _v[1]*rhs._v[1],
                         _v[2]*rhs._v[2], _v[3]*rhs._v[3]);
        }

        /** Unary vector multiply. Slightly more efficient because no temporary
          * intermediate object.
        */
        inline Vec4ui& operator *= (const Vec4ui& rhs)
        {
            _v[0] *= rhs._v[0];
            _v[1] *= rhs._v[1];
            _v[2] *= rhs._v[2];
            _v[3] *= rhs._v[3];
            return *this;
        }

        /** Binary vector add. */
        inline Vec4ui operator + (const Vec4ui& rhs) const
        {
            return Vec4ui(_v[0]+rhs._v[0], _v[1]+rhs._v[1],
                         _v[2]+rhs._v[2], _v[3]+rhs._v[3]);
        }

        /** Unary vector add. Slightly more efficient because no temporary
          * intermediate object.
        */
        inline Vec4ui& operator += (const Vec4ui& rhs)
        {
            _v[0] += rhs._v[0];
            _v[1] += rhs._v[1];
            _v[2] += rhs._v[2];
            _v[3] += rhs._v[3];
            return *this;
        }

        /** Binary vector subtract. */
        inline Vec4ui operator - (const Vec4ui& rhs) const
        {
            return Vec4ui(_v[0]-rhs._v[0], _v[1]-rhs._v[1],
                         _v[2]-rhs._v[2], _v[3]-rhs._v[3] );
        }

        /** Unary vector subtract. */
        inline Vec4ui& operator -= (const Vec4ui& rhs)
        {
            _v[0]-=rhs._v[0];
            _v[1]-=rhs._v[1];
            _v[2]-=rhs._v[2];
            _v[3]-=rhs._v[3];
            return *this;
        }


};    // end of class Vec4ui

}    // end of namespace osg

#endif

