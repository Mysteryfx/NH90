/* -*-c++-*- OpenSceneGraph - Copyright (C) 1998-2006 Robert Osfield 
 *
 * This library is open source and may be redistributed and/or modified under  
 * the terms of the OpenSceneGraph Public License (OSGPL) version 0.0 or 
 * (at your option) any later version.  The full license is in LICENSE file
 * included with this distribution, and on the openscenegraph.org website.
 * 
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * OpenSceneGraph Public License for more details.
*/

#ifndef OSG_RECT
#define OSG_RECT 1

#include <osg/Export>
#include <osg/Vec2f>
#include <osg/Vec2d>
#include <osg/Vec2i>
#include <float.h>

namespace osg {

/** General purpose axis-aligned bounding box class for enclosing objects/vertices.
  * Bounds leaf objects in a scene such as osg::Drawable objects. Used for frustum
  * culling etc.
*/
template<typename VT>
class RectImpl
{
    public:
        typedef VT vec_type;
        typedef typename VT::value_type value_type;
    
        /** Minimum extent. (Smallest X, Y, and Z values of all coordinates.) */
        vec_type _min;
        /** Maximum extent. (Greatest X, Y, and Z values of all coordinates.) */
        vec_type _max;

        /** Creates an uninitialized bounding box. */
        inline RectImpl() :
            _min(FLT_MAX,
                 FLT_MAX),
            _max(-FLT_MAX,
                 -FLT_MAX)
        {}
    
        /** Creates a bounding box initialized to the given extents. */
        inline RectImpl(value_type xmin, value_type ymin, 
                           value_type xmax, value_type ymax) :
                           _min(xmin,ymin),
                           _max(xmax,ymax) {}

        /** Creates a bounding box initialized to the given extents. */
        inline RectImpl(const vec_type& min,const vec_type& max) : 
                    _min(min),
                    _max(max) {}

        /** Clear the bounding box. Erases existing minimum and maximum extents. */
        inline void init()
        {
            _min.set(FLT_MAX,
                     FLT_MAX);
            _max.set(-FLT_MAX,
                     -FLT_MAX);
        }
        
        /** Returns true if the bounding box extents are valid, false otherwise. */              
        inline bool valid() const
        {
            return _max.x()>=_min.x() &&  _max.y()>=_min.y();
        }

        /** Sets the bounding box extents. */
        inline void set (value_type xmin, value_type ymin,
                         value_type xmax, value_type ymax)
        {
            _min.set(xmin,ymin);
            _max.set(xmax,ymax);
        }

        /** Sets the bounding box extents. */
        inline void set(const vec_type& min,const vec_type& max)
        {
            _min = min;
            _max = max;
        }

        inline value_type& xMin() { return _min.x(); }
        inline value_type xMin() const { return _min.x(); }
 
        inline value_type& yMin() { return _min.y(); }
        inline value_type yMin() const { return _min.y(); }

        inline value_type& xMax() { return _max.x(); }
        inline value_type xMax() const { return _max.x(); }

        inline value_type& yMax() { return _max.y(); }
        inline value_type yMax() const { return _max.y(); }

        /** Calculates and returns the bounding box center. */
        inline const vec_type center() const
        {
            return (_min+_max)*0.5;
        }

        /** Calculates and returns the bounding box radius. */
        inline value_type radius() const
        {
            return sqrt(radius2());
        }

        /** Calculates and returns the squared length of the bounding box radius.
          * Note, radius2() is faster to calculate than radius(). */
        inline value_type radius2() const
        {
            return 0.25*((_max-_min).length2());
        }

        /** Returns a specific corner of the bounding box.
          * pos specifies the corner as a number between 0 and 3.
          * Each bit selects an axis, X, or Y from least- to
          * most-significant. Unset bits select the minimum value
          * for that axis, and set bits select the maximum. */
        inline const vec_type corner(unsigned int pos) const
        {
            return vec_type(pos&1?_max.x():_min.x(),pos&2?_max.y():_min.y());
        }

        /** Expands the bounding box to include the given coordinate.
          * If the box is uninitialized, set its min and max extents to v. */
        inline void expandBy(const vec_type& v)
        {
            if(v.x()<_min.x()) _min.x() = v.x();
            if(v.x()>_max.x()) _max.x() = v.x();

            if(v.y()<_min.y()) _min.y() = v.y();
            if(v.y()>_max.y()) _max.y() = v.y();
        }

        /** Expands the bounding box to include the given coordinate.
          * If the box is uninitialized, set its min and max extents to
          * Vec2(x,y). */
        inline void expandBy(value_type x,value_type y)
        {
            if(x<_min.x()) _min.x() = x;
            if(x>_max.x()) _max.x() = x;

            if(y<_min.y()) _min.y() = y;
            if(y>_max.y()) _max.y() = y;
        }

        /** Expands this bounding box to include the given bounding box.
          * If this box is uninitialized, set it equal to bb. */
        void expandBy(const RectImpl& bb)
        {
            if (!bb.valid()) return;

            if(bb._min.x()<_min.x()) _min.x() = bb._min.x();
            if(bb._max.x()>_max.x()) _max.x() = bb._max.x();

            if(bb._min.y()<_min.y()) _min.y() = bb._min.y();
            if(bb._max.y()>_max.y()) _max.y() = bb._max.y();
        }

        /** Returns the intersection of this bounding box and the specified bounding box. */
        RectImpl intersect(const RectImpl& bb) const
        {    
			return RectImpl(
				osg::maximum(xMin(),bb.xMin()),osg::maximum(yMin(),bb.yMin()),
                osg::minimum(xMax(),bb.xMax()),osg::minimum(yMax(),bb.yMax())
                );

        }

        /** Return true if this bounding box intersects the specified bounding box. */
        bool intersects(const RectImpl& bb) const
        {    return osg::maximum(xMin(),bb.xMin()) <= osg::minimum(xMax(),bb.xMax()) &&
                    osg::maximum(yMin(),bb.yMin()) <= osg::minimum(yMax(),bb.yMax());

        }

        /** Returns true if this bounding box contains the specified coordinate. */
        inline bool contains(const vec_type& v) const
        {
            return valid() && 
                   (v.x()>=_min.x() && v.x()<=_max.x()) &&
                   (v.y()>=_min.y() && v.y()<=_max.y());
        }

		/** Returns true if this bouding box contains the specified bounding box. */
		inline bool contains(const RectImpl& bb) const
		{
			return contains(bb._min) && contains(bb._max);
		}

		inline vec_type size() const
		{
			return vec_type(_max.x() - _min.x(), _max.y() - _min.y());
		}
};

typedef RectImpl<Vec2f> Rectf;
typedef RectImpl<Vec2d> Rectd;
typedef RectImpl<Vec2i> Recti;

#ifdef OSG_USE_FLOAT_BOUNDINGBOX
typedef Rectf Rect;
#else
typedef Rectd Rect;
#endif

}

template <class S>
S& operator >>(S& stream, osg::Recti &v)
{
    stream >> v._min;
    stream >> v._max;
	return stream;
}

template <class S>
S& operator >>(S& stream, osg::Rectf &v)
{
    stream >> v._min;
    stream >> v._max;
	return stream;
}

template <class S>
S& operator >>(S& stream, osg::Rectd &v)
{
    stream >> v._min;
    stream >> v._max;
	return stream;
}

#endif
