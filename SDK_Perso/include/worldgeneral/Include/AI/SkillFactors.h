#pragma once

//AI parameters which are depended on skill

#include "WorldGeneral.h"
#include "wMovingObject.h"

class WORLDGENERAL_API SkillFactors
{
public:
	struct WORLDGENERAL_API FactorParam
	{
		FactorParam();
		unsigned int ui() const;
		float f() const;
		bool b() const;
		float			value;
	};
	typedef ed::vector<FactorParam> FactorParams;
	typedef ed::vector<FactorParams> FactorParamsBySkill;
	enum WORLDGENERAL_API FactorName {
		//TARGET SELECTION AND PRIORITIZATION
		TARGET_DISANGAGE_TEST_PROBABILITY_LEADER_FACTOR = 0,
		TARGET_DISANGAGE_TEST_PROBABILITY_WINGMEN_FACTOR = 1,
		//other wingmen assigned target selection probability = OTHER_WINGMEN_TARGET_SELECTION_PROBABILITY_LEADER_FACTOR * OTHER_WINGMEN_TARGET_SELECTION_PROBABILITY_WINGMEN_FACTOR
		TARGET_PRIORITIZATION_BY_TYPE_PROBABILITY_LEADER_FACTOR = 2,
		TARGET_PRIORITIZATION_BY_TYPE_PROBABILITY_WINGMEN_FACTOR = 3,
		//Target prioritization by type propability if most priority target IS NOT AIRDEFENCE  = TARGET_PRIORITIZATION_BY_TYPE_PROBABILITY_LEADER_FACTOR * TARGET_PRIORITIZATION_BY_TYPE_PROBABILITY_WINGMEN_FACTOR
		AIRDEFENCE_PRIORITIZATION_BY_TYPE_PROBABILITY_LEADER_FACTOR = 4,
		AIRDEFENCE_PRIORITIZATION_BY_TYPE_PROBABILITY_WINGMEN_FACTOR = 5,
		//Target prioritization by type propability  if most priority target IS AIRDEFENCE = AIRDEFENCE_PRIORITIZATION_BY_TYPE_PROBABILITY_LEADER_FACTOR * AIRDEFENCE_PRIORITIZATION_BY_TYPE_PROBABILITY_WINGMEN_FACTOR
		AIRDEFENCE_PRIORITIZATION_BY_KILL_DIST_PROBABILITY_LEADER_FACTOR = 6,
		AIRDEFENCE_PRIORITIZATION_BY_KILL_DIST_PROBABILITY_WINGMEN_FACTOR = 7,
		//SAM prioritization by kill distance probability = AIRDEFENCE_PRIORITIZATION_BY_KILL_DIST_PROBABILITY_LEADER_FACTOR * AIRDEFENCE_PRIORITIZATION_BY_KILL_DIST_PROBABILITY_WINGMEN_FACTOR
		TARGET_AIRDEFENCE_PROTECTION_TEST_LEADER_FACTOR = 8,
		TARGET_AIRDEFENCE_PROTECTION_TEST_WINGMEN_FACTOR = 9,
		//Target airdefence protection test probability = TARGET_AIRDEFENCE_PROTECTION_TEST_LEADER_FACTOR * TARGET_AIRDEFENCE_PROTECTION_TEST_WINGMEN_FACTOR airdefence units protecting target
		//SELF-DEFENCE
		MISSILE_EVASION = 10,
		MISSILE_LAUNCH_REACTION_DELAY_FACTOR = 11,
		//DETECTION
		VISUAL_AND_OPTIC_DETECITON_DIST_FACTOR = 12,
		VISUAL_AND_OPTIC_DETECITON_TIME_FACTOR = 13,
		RADAR_DETECTION_TIME_TO_SCAN_PERIOD_COEFF = 14,
		CAN_USE_RWR = 15,
		//A2G-ATTACKS
		PATHFINDING_IN_MOUNTAIN_TERRAIN_PROBABILITY = 16,
		NON_VISIBLE_TARGET_ATTACK_WITH_UNGUIDED_WEAPON = 17,
		MUTLIPLE_ATTACK_ON_APPROACH = 18,
		ADDITIONAL_BREAKAWAY_DIST_PERCENT = 19,
		//AIMING
		WIND_PARAMS_MEASURING_ACCURACY_IN_AIMING = 20, //orderly distribution
		TARGET_VELOCITY_MEASURING_ACCURACY_IN_AIMING = 21, //orderly distribution
		//BOMBING
		BOMBING_ALONG_RUNWAY = 22,
		BOMB_AIMING_ANGULAR_ERROR = 23,  //orderly distribution
		STATIC_COLUMN_ATTACK = 24,
		MOVING_COLUMN_ATTACK = 25 ,
		COLUMN_ATTACK_REQUIRED_BOMB_QTY_CALCULATION_MAX_ERROR = 26,
		//CANNON ATTACK
		HEAVY_ARMORED_TARGET_ATTACK_FROM_REAR_ASPECT = 27,
		SHELL_PIERCING_CAPABILITIES_TEST_BEFORE_CANNON_ATTACK = 28,
		CANNON_FIRE_DISTANCE_COEFF = 29, //effective fire distance = fire distance * fire distance coeff
		CANNON_AMMO_OPTIMAL_USING_LEVEL = 30,  //0 - best, 2- worst
		//ROCKET ATTACK
		ROCKET_FIRE_DISTANCE_COEFF = 31,
		ROCKET_AIMING_ANGULAR_ERROR = 32,  ////orderly distribution
		ROCKET_AMMO_OPTIMAL_AMMO_USING_LEVEL = 33,  //0 - best, 2- worst
		//MISSILE ATTACK
		SHORT_RANGE_ASM_MAX_LAUNCH_DISTANCE_COEFF = 34, //max_launch_distance_by_skill = min_launch_distance + (max_launch_distance - min_launch_distance) * SHORT_RANGE_ASM_MAX_LAUNCH_DISTANCE_COEFF
		ATTACK_REQUIRED_MISSILES_QTY_CALCULATION = 35,
		BREAKAWAY_FOR_MULTIPLE_MISSILE_ATTACK_IN_SINGLE_APPROACH = 36,
		MISSILE_LAUNCH_MIN_INTERVAL = 37,		
		//A2A WARFARE
		MULTILAUNCH_QTY = 38,
		AA_MISSILE_MAX_LAUNCH_DISTANCE_COEFF = 39,
		MAX_NY_RATIO = 40,

		FACTOR_MAX = 41
	};
public:
	SkillFactors();
	void clear();
	void init();
	FactorParam get_param(FactorName factor_name, woPointer ptr) const;
	FactorParam get_param(FactorName factor_name, int skill) const;
public:
	static SkillFactors instance;
private:
	FactorParamsBySkill storage;
};