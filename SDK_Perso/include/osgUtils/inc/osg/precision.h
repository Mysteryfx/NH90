#ifndef OSGUTILS_OSG_PRECISION_H
#define OSGUTILS_OSG_PRECISION_H

#include <osg/Vec3d>

#ifndef DISABLE_OBSOLETE_OSGUTILS

//============================================================================================
// precision
//    Обёртка для файла predicates.c, написанного Jonathan Richard Shewchuk-ом для точных 
//    вычислений, чтоб удобно было работать с osg::Vec3d
//============================================================================================
namespace precision
{
	//========================================================================================
	// init
	//    Инициализация работы с длинной арифметикой. Вызвать один раз в самом начале.
	//========================================================================================
	void init();

	//========================================================================================
	// orient2d
	//    Ориентация точки c, относительно вектора ab. Вычисления проводятся в плоскости OXZ.
	//    Координата y игнорируется. По-сути тоже самое, что и ((c - a) ^ (b - a)).y() для
	//    векторов у которых y = 0.0, только более точно
	//
	//    > 0 - лежит слева
	//    0.0 - лежит ровно на линии
	//    < 0 - лежит справа
	//========================================================================================
	double orient2d(const osg::Vec3d& a, const osg::Vec3d& b, const osg::Vec3d& c);

	//========================================================================================
	// inCircle
	//    Лежит ли точка d внутри окружности описанной вокруг треугольника [a,b,c]
	//
	//    > 0 - лежит внутри
	//    0.0 - лежит на окружности
	//    < 0 - лежит снаружи
	//========================================================================================
	double inCircle(const osg::Vec3d& a, const osg::Vec3d& b, const osg::Vec3d& c, const osg::Vec3d& d);

	//========================================================================================
	// isQuadConvex
	//    Является ли четырёхугольник [a, b, c, d] выпуклым
	//    
	//    1.0 - выпуклый
	//    0.0 - есть точки на одной линии
	//   -1.0 - не выпуклый
	//========================================================================================
	double isQuadConvex(const osg::Vec3d& a, const osg::Vec3d& b, const osg::Vec3d& c, const osg::Vec3d& d);

	//========================================================================================
	// segmentIntersection
	//    Пересекаются ли отрезки [a1, b1] и [a2, b2]. Не находит саму точку пересечения.
	//
	//    1.0 - пересекаются
	//    0.0 - касаются. Например отрезки [(0.0, 0.0), (1.0, 0.0)] и [(0.5, 0.0), (0.5, 1.0)]
	//   -1.0 - не пересекаются
	//========================================================================================
	double segmentIntersection(const osg::Vec3d& a1, const osg::Vec3d& b1, const osg::Vec3d& a2, const osg::Vec3d& b2);
};

#endif

#endif // OSGUTILS_OSG_PRECISION_H
