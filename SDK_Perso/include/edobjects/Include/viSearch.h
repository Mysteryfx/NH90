#ifndef viSearch_H
#define viSearch_H

#include "edObjects.h"

#include "viFlags.h"

class viObject;
class viSearch;
class ClipVolume;

// должен возвращать true если надо еще и вставить объект в список
typedef bool (*viSearchHandler)(viObject *item, viSearch *search, void *data);

// интерфейс объекта поиска 
class EDOBJECTS_API viSearch
{
public:
	// конструкторы
	static viSearch *Create(ClipVolume *volume, viObject **store, unsigned int size, viFlag flags = viAny);
	static viSearch *Create(ClipVolume *volume, viSearchHandler handler, void *data, viFlag flags = viAny);
	static viSearch *Create(ClipVolume *volume, viSearchHandler handler, void *data, viObject **store, unsigned int size, viFlag flags = viAny);

	virtual ~viSearch(void) {};

	// типы объектов для поиска
	virtual viFlag Types() const = 0;
	
	// получить идентификатор поиска
	virtual int ID() const = 0;

	// преждевременное окончание поиска - для вызова из обработчика
	virtual void Finish(void) = 0;

	// объем
	virtual ClipVolume *Volume() const=0;

	// возвращает true если можно продолжать поиск (false - окончание поиска)
	virtual bool TestAndInsert(viObject *item, bool contains)=0;

	// возврат результатов
	virtual viObject **Store(void) = 0;
	virtual unsigned int Count(void) const = 0;
};

/// search object with autogenerated id
class viSearchCounted: public viSearch{
private:
	static int last_id;
protected:
	int id;
public:
	EDOBJECTS_API viSearchCounted();

	// получить идентификатор поиска
	EDOBJECTS_API virtual int ID() const;
};

#endif // viSearch_H
